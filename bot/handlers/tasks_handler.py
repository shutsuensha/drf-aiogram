from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from services.tasks_api import create_task, get_task_detail, list_tasks, mark_done, mark_undone
from states.tasks_states import AddTask

router = Router()


@router.message(F.text == "/add")
async def add_task(message: Message, state: FSMContext):
    await state.set_state(AddTask.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")


@router.message(AddTask.waiting_for_title)
async def get_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddTask.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")


@router.message(AddTask.waiting_for_description)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddTask.waiting_for_deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 22.05.2025 18:45 (Europe/Minsk)")


@router.message(AddTask.waiting_for_deadline)
async def get_deadline(message: Message, state: FSMContext):
    deadline_str = message.text.strip()

    try:
        datetime.strptime(deadline_str, "%d.%m.%Y %H:%M")
    except ValueError:
        return await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 22.05.2025 18:45"
        )

    await state.update_data(deadline=deadline_str)
    await finish_task_creation(message, state)


async def finish_task_creation(message: Message, state: FSMContext):
    data = await state.get_data()

    title = data.get("title")
    description = data.get("description")
    deadline = data.get("deadline")

    if not all([title, description, deadline]):
        return await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã.")

    task_data = {
        "title": title,
        "description": description,
        "deadline": deadline,
        "telegram_user_id": message.from_user.id,
    }

    try:
        task = await create_task(task_data)

        text = (
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"<b>ID:</b> {task['id']}\n"
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {task['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
            f"<b>–î–µ–¥–ª–∞–π–Ω:</b> ‚è∞ {task['deadline']} (Europe/Minsk)\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> üïí {task['status'].capitalize()}"
        )
        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {str(e)}")

    await state.clear()


@router.message(Command(commands=["mytasks"]))
async def cmd_list(message: Message):
    tasks = await list_tasks(message.from_user.id)

    if not tasks:
        return await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")

    lines = ["üóÇ <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n"]
    for t in tasks:
        status_icon = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if t["status"] == "done" else "üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        lines.append(
            f"<b>ID:</b> {t['id']}\n"
            f"<b>üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {t['title']}\n"
            f"<b>‚è∞ –î–µ–¥–ª–∞–π–Ω:</b> {t['deadline']} (Europe/Minsk)\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}\n"
            f"------------------------------"
        )

    await message.answer("\n".join(lines), parse_mode="HTML")


@router.message(Command(commands=["view"]))
async def cmd_view(message: Message):
    try:
        _, task_id_str = message.text.split(" ", 1)
        task_id = int(task_id_str.strip())
    except Exception:
        return await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: /view <id>")

    task = await get_task_detail(task_id)

    status_icon = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task["status"] == "done" else "üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ"

    text = (
        f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ #{task['id']}</b>\n\n"
        f"<b>üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {task['title']}\n"
        f"<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"<b>‚è∞ –î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']} (Europe/Minsk)\n"
        f"<b>üìç –°—Ç–∞—Ç—É—Å:</b> {status_icon}"
    )

    await message.answer(text, parse_mode="HTML")


@router.message(Command(commands=["done"]))
async def cmd_done(message: Message):
    try:
        _, task_id_str = message.text.split(" ", 1)
        task_id = int(task_id_str.strip())
    except Exception:
        return await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /done <id>")

    task = await mark_done(task_id)

    text = (
        f"‚úÖ <b>–ó–∞–¥–∞—á–∞ #{task['id']} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!</b>\n\n"
        f"<b>üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {task['title']}\n"
        f"<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"<b>‚è∞ –î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']} (Europe/Minsk)\n"
        f"<b>üìç –°—Ç–∞—Ç—É—Å:</b> ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    )

    await message.answer(text, parse_mode="HTML")


@router.message(Command(commands=["undone"]))
async def cmd_undone(message: Message):
    try:
        _, task_id_str = message.text.split(" ", 1)
        task_id = int(task_id_str.strip())
    except Exception:
        return await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /undone <id>")

    task = await mark_undone(task_id)

    text = (
        f"‚Ü©Ô∏è <b>–ó–∞–¥–∞—á–∞ #{task['id']} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!</b>\n\n"
        f"<b>üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {task['title']}\n"
        f"<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"<b>‚è∞ –î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']} (Europe/Minsk)\n"
        f"<b>üìç –°—Ç–∞—Ç—É—Å:</b> üïí –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    )

    await message.answer(text, parse_mode="HTML")


def register_dispatcher(dp):
    dp.include_router(router)
